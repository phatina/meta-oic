#! /usr/bin/make -f
# Author: Philippe Coval <philippe.coval@osg.samsung.com>
# ex: set tabstop=4 noexpandtab:
SELF?=${CURDIR}/rules/50-tasks.mk
rules_files?=$(sort $(wildcard rules/??-*.mk))
explicit_file?=rules/45-explicit-local.mk
phony_file?=rules/80-phony-local.mk
config_file?=rules/10-config.mk
phony_rules_files?=$(subst ${phony_file},, ${rules_files})
welcome_delay?=5
machines_list?=$(shell ls rules/config/machine/ | sed -e 's|.mk||g' | grep -v '~' | sort)

.PHONY: rule/%

rule/default: GNUmakefile
	${MAKE} rule/overide/build \
 || ${MAKE} rule/done/setup rule/overide/cleanall rule/overide/build

rule/build: rule/overide/pre rule/overide/all rule/overide/post

rule/rebuild: rule/overide/purge rule/overide/build

rule/pre: ${explicit_file} ${phony_file} GNUmakefile Makefile
	@${MAKE} --no-print-directory rule/done/welcome
	@date

rule/post: GNUmakefile Makefile
	@date

rule/help:
	@echo "# ${project} "
	@echo "# "
	@echo "# URL: ${url}"
	@echo "# "
	@echo "# Usage:"
	@echo "#  make [help] [longhelp] [default] [print]"
	@echo "#  make \$${MACHINE}"
	@echo "# "
	@echo "#  Where \$${MACHINE} is set to name of supported one among those:"
	@echo "#  ${machines_list}"
	@echo "# "
	@echo "#  Current machine is ${MACHINE}"
	@echo "# "
	@echo "# "

rule/welcome: GNUmakefile
	@echo "# "
	@echo "# Welcome, this is one time message"
	@${MAKE} rule/done/longhelp rule/overide/print
	@echo "# If you want to build for a different machine than ${MACHINE}"
	@echo "# Press Crl+C during the next ${welcome_delay} seconds"
	@${MAKE} rule/overide/pause/${welcome_delay}
	@echo "# Let's build for ${MACHINE}"

rule/pause/%: GNUmakefile
	sleep ${@F}

rule/longhelp: README.md rule/overide/help
	@echo ""
	@cat $<

GNUmakefile: ${rules_files} ${phony_file} ${explicit_file} ${SELF}
	@echo "#! /usr/bin/make -f" > $@
	@for rule in ${rules_files} ; do echo "include $${rule}" >> $@ ; done
	@sed -e 's|^\(include .*-local.*.mk\)|-\1|g' -i $@

rule/print: ${rules_files} GNUmakefile
	@echo "# Usage: make help"
	@echo ""
	@echo "# Existing rules :"
	@grep -o -e '^[^# 	]*:' $< \
 | grep -v '\$$' | grep -v '^rule/' | grep -v '\.mk:' | grep -v '^\.'
	@echo ""
	@echo "# Configuration / Environment:"
	@echo "# project_name=${project_name}"
	@echo "# branch=${branch}"
	@echo "# MACHINE=${MACHINE}"
	@echo "# SHELL=${SHELL}"
	@echo "# USER=${USER}"
	@echo "# email=${email}"
	@echo "# version=${version}"
	@echo "# DL_DIR=${DL_DIR}"
	@echo "# sources_dir=${sources_dir}"
	@echo "# cache_dir=${cache_dir}"
	@echo "# build_dir=${build_dir}"
	@echo "# image_dir=${image_dir}"
	@echo "# distro=${distro}"
	@echo "# conf_file=${conf_file}"
	@echo "# image=${image}"
	@echo "# images=${images}"
	@echo "# sources_name=${sources_name}"
	@echo "# sources_layers=${sources_layers}"
	@echo "# sources_layers_conf=${sources_layers_conf}"
	@echo ""
	@echo "# More in rules/*.mk"

rule/warning:
	$(warning # log: ${@F}: ${ARGS})

rule/error:
	$(error # log: ${@F}: ${ARG})

rule/info:
	$(info log: ${@F}: ${ARG})

${tmp_dir}:
	mkdir -p $@


rule/patch: rule/overide/sources
	$(info no patch for $@)

${phony_file}: ${phony_rules}
	@mkdir -p ${@D}
	@echo '.PHONY: \' > $@
	@grep '^rule/.*:' rules/*.mk | grep -v '%' | cut -d: -f2| sort | sed -e 's|$$| \\|g' >> $@
	@echo ' #eol' >> $@

rule/explicit: ${explicit_file}
	cat $<

${explicit_file}: ${SELF} $(subst ${explicit_file},, ${phony_rules_files})
	@mkdir -p ${@D}
	@echo "# generated by ${<F}" > $@
	@grep -o 'rule/done/[^ /\[]*' rules/*.mk \
 | grep -v '%' | grep -v '.*/$$' | cut -d: -f2 | sort | uniq \
 | sed -e 's|\(.*\)$$|$${tmp_dir}/\1 \\|g' >> $@
	@echo -e ': $${rules_files}\n	@$${MAKE} rule/overide/$${@F}\n	@mkdir -p $${@D}\n	@touch $${@}\n\n' >> $@

rule/done/%: ${tmp_dir}/rule/done/%
	$(info log: one shot: ${@} : rm "$<" to do it again)

rule/make/%:
	$(info log: sub make to rescan files "$@")
	${MAKE} rule/${@F} ${ARGS}

rule/log/%: ${tmp_dir}
	mkdir -p ${tmp_dir}/${@D}
	script -e -c "${MAKE} rule/${@F}" ${tmp_dir}/$@

${config_file}:
	@echo "#distro?=TODO" > $@

rule/all: GNUmakefile
	${MAKE} rule/done/configure rule/print/images rule/overide/image rule/list/images

rule/rules: ${rules_files}

${sources_dir}/${distro}: ${config_file} rule/done/patch
	@ls -l ${@}/meta || make rule/error ARG="Please set distro var in $<"

rule/distro: ${sources_dir}/${distro}
	grep ${<F} rules/*.mk


${init_build_env}: ${sources_dir}/${distro}
	ls -l ${@D}

${build_dir}: ${init_build_env} rule/done/init_env
	ls ${<D}/${@F} || grep SHELL rules/*.mk && ln -fs ${@} ${<D}/${@F}
	ls ${@} || ln -fs ${<D}/${@F} ${@}
	$(info log: workaround a /bin/sh behaviour make sure to set SHELL=/bin/bash)

rule/init_env: ${init_build_env}
	mkdir -p ${build_dir}
	cd ${build_dir}/.. && ${source} ${<} ${build_dir}
	grep '^MACHINE.*' ${build_dir}/conf/local.conf

rule/init_build_env: ${init_build_env}
	ls $<

rule/bblayers: ${bblayers_file}
	ls $<

rule/sources: ${sources_dir}
	ls $< | wc -l

rule/builddir: ${build_dir}
	ls $<

rule/configure-conf: rule/conf ${rules_files}
	grep -i MACHINE ${conf_file}

rule/configure-machine: ${conf_file}.mine
	cp -av $< ${conf_file}

rule/configure-bsp: ${conf_file} ${bblayers_file}
	sync
rule/configure-bblayers: rule/done/sub-configure-rescan
	grep BBLAYERS ${bblayers_file}

${build_dir}/downloads: ${build_dir}
	[ "" = "${DL_DIR}" ] || ln -fs "${DL_DIR}" ${build_dir} || mkdir -p $@

rule/configure-downloads: ${build_dir}/downloads

${bblayers_file}:  ${bblayers_file}.mine
	cp -av $< $@

${conf_file}:  ${conf_file}.mine
	cp -av $< $@

${conf_file}.mine: ${conf_file}.orig
	sed -e "s|^MACHINE ??=.*|MACHINE ??= \"${MACHINE}\"|g"  < $< > $@

${conf_file}.orig ${bblayers_file}.orig ${build_dir}/conf: ${SELF} ${sources_dir}
	$(info log: keep untouched bblayers_file)
	@ls ${bblayers_file} || make rule/init_env
	cp -av ${bblayers_file} ${bblayers_file}.orig
	cp -av ${conf_file} ${conf_file}.orig
# RELATIVE_DIR := "${@os.path.abspath(os.path.dirname(d.getVar('FILE', True)) + '/../..')}"
${bblayers_file}.mine: ${bblayers_file}.orig
	echo "RELATIVE_DIR := \"\$${@os.path.abspath(os.path.dirname(d.getVar('FILE', True)) + '/${project_relative_dir}')}\"" > $@
	cat $< >> $@
	make rule/done/sub-configure-layers
	cat "${bblayers_file}.tmp" >> $@
	sed -e "s|${CURDIR}|\$${RELATIVE_DIR}|g" -i $@
	grep BBLAYERS $@ | wc -l

rule/sub-rule/layer/%: %
	echo "BBLAYERS += \"${CURDIR}/${<}\"" >> ${bblayers_file}.tmp
	echo "BBLAYERS_NON_REMOVABLE += \"${CURDIR}/${<}\"" >> ${bblayers_file}.tmp

rule/sub-rule/layer/.: .
	echo "BBLAYERS += \"${CURDIR}/${<}\"" >> ${bblayers_file}.tmp
	echo "BBLAYERS_NON_REMOVABLE =+ \"${CURDIR}/${<}\"" >> ${bblayers_file}.tmp

rule/sub-configure-layers: ${bblayers_file}.orig
	$(info log: sources_layers=${sources_layers})
	echo "# generated by $@" > ${bblayers_file}.tmp
	for dir in ${sources_layers} ; do make rule/sub-rule/layer/$${dir} ; done

rule/sub-configure-rescan: rule/done/sources rule/done/configure-machine rule/done/sub-configure-layers rule/done/configure-downloads
	$(info log: sources_layers=${sources_layers})
	$(info remember dont call $@ direcly but configure)

rule/configure:
	${MAKE} rule/done/sub-configure-rescan rule/done/configure-conf rule/done/configure-bblayers rule/bblayers
	ln -fs ${sources_name} ${CURDIR}/sources
	ln -fs ${build_dir} ${CURDIR}/build

rule/conf: ${conf_file}
	grep '^MACHINE.*' $<
	grep ${MACHINE} $<

rule/env/%: ${init_build_env}
	grep ${MACHINE} ${conf_file}
	cd ${<D}  \
 && ${source} ${<} ${build_dir} \
 && make -C ${CURDIR} rule/${@F} ARGS="${ARGS}"

rule/exec/%: ${build_dir} ${conf_file} ${bblayers_file}
	grep '^MACHINE.*' $</conf/local.conf
	cd ${<} && time ${@F} ${EXTRA_ARGS} ${ARGS}

rule/env-exec/%: ${init_build_env}
	cd ${<D}  \
 && ${source} ${<} ${build_dir} \
 && make -C ${CURDIR} rule/exec/${@F} ARGS="${ARGS}"

rule/images: ${tmp_dir}
	for image in ${images} ; do \
	make rule/all image=$${image} \
	|| echo "$${image}/$${machine}" >> ${tmp_dir}/fail.log ; \
	done ; \

rule/machines: ${tmp_dir}
	for machine in ${machines} ; do \
	make rule/all MACHINE=$${machine} \
	|| echo "$${image}/$${machine}" >> ${tmp_dir}/fail.log ; \
	done ;

rule/configs: ${tmp_dir}
	for machine in ${machines} ; do \
	make rule/images MACHINE=$${machine} \
	|| echo "$${image}/$${machine}" >> ${tmp_dir}/fail.log ; \
	done ;

rule/clean:
	rm -rfv *~ .#*
	$(info make rule/{cleanall,distclean,purge} to clean more)

rule/cleanall: rule/overide/clean
	rm -rf ${build_dir}/conf ${tmp_dir}

rule/distclean: rule/overide/cleanall rule/scm-${scm}-clean
	rm -rf ${build_dir}/tmp ${sources_dir}

rule/clean-bsp:
	$(info to be overiden in include/bsp/${bsp})

rule/purge: rule/overide/distclean rule/scm-${scm}-cleanall
	rm -rf --  build* tmp

rule/build-packages: rule/overide/build-packages
	$(info to overloaded $@)

rule/clean-packages: rule/overide/clean-packages
	$(info to overloaded $@)

rule/rebuild-packages: rule/clean-packages rule/build-packages
	sync

#rule/print/image: rule/print/package/${image}
#	sync


rules/include/machine/%.mk:
	$(error please create $@)

rules/config/bsp/${bsp}/default.xml:
	$(error please create $@)


rule/setup-bsp: rule/done/scm-${scm}-setup-bsp


rules/05-local-config.mk:
	touch $@

rule/setup-machine/%: rules/config/machine/%/config.mk GNUmakefile
	@echo "MACHINE?=${@F}" > rules/05-local-config.mk
	@echo 'include $<' >> rules/05-local-config.mk
	@${MAKE} GNUmakefile
	@${MAKE} rule/cleanall rule/setup-bsp rule/reset MACHINE=${@F}
	grep MACHINE rules/05-local-config.mk
	unset MACHINE ; make rule/print | grep MACHINE | grep ${@F}


${machines_list}:
	${MAKE} rule/build-machine/${@F}

machines: ${machines_list}

rule/build-machine/%:
	grep '^MACHINE' rules/config/machine/${@F}/config.mk
	make rule/setup-machine/${@F}
	unset MACHINE ; make rule/image
#	make rule/images

rule/build-machines:
	for MACHINE in ${machines_list} ; do make rule/build-machine/${MACHINE} ; done

rule/reset:
	make GNUmakefile
