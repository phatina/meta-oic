#! /usr/bin/make -f
# Author: Philippe Coval <philippe.coval@osg.samsung.com>
# ex: set tabstop=4 noexpandtab:

distro_machines_dir?=${sources_dir}/${distro}/meta/conf/machine
bsp_machines_dir?=${sources_dir}/meta-${bsp}/conf/machine/
bsp_config_file?=rules/config/bsp/${bsp}/config.mk
machine_config_file?=rules/config/machine/${MACHINE}/config.mk

rule/configure-bblayers: rule/done/sub-configure-rescan
	grep BBLAYERS ${bblayers_file}

${build_dir}/downloads: ${build_dir}
	[ "" = "${DL_DIR}" ] || ln -fs "${DL_DIR}" ${build_dir} || mkdir -p $@

rule/configure-downloads: ${build_dir}/downloads

${bblayers_file}:  ${bblayers_file}.mine
	cp -v $< $@

${conf_file}:  ${conf_file}.mine
	cp -v $< $@

rule/conf_file: ${conf_file}
	ls -l $<

${conf_file}.mine: ${conf_file}.orig
	sed -e "s|^MACHINE ??=.*|MACHINE ??= \"${MACHINE}\"|g"  < $< > $@

${conf_file}.orig ${bblayers_file}.orig ${build_dir}/conf: ${SELF} 
	$(info log: $@: keep untouched bblayers_file)
	@ls ${bblayers_file} || make rule/override/init_env
	cp -v ${bblayers_file} ${bblayers_file}.orig
	cp -v ${conf_file} ${conf_file}.orig
	touch $@

# RELATIVE_DIR := "${@os.path.abspath(os.path.dirname(d.getVar('FILE', True)) + '/../..')}"
${bblayers_file}.mine: ${bblayers_file}.orig
	echo "RELATIVE_DIR := \"\$${@os.path.abspath(os.path.dirname(d.getVar('FILE', True)) + '/${project_relative_dir}')}\"" > $@
	cat $< >> $@
	make rule/done/sub-configure-layers
	cat "${bblayers_file}.tmp" >> $@
	sed -e "s|${CURDIR}|\$${RELATIVE_DIR}|g" -i $@
	grep BBLAYERS $@ | wc -l

rule/sub-rule/layer/%: %
	echo "BBLAYERS += \"${CURDIR}/${<}\"" >> ${bblayers_file}.tmp
	echo "BBLAYERS_NON_REMOVABLE += \"${CURDIR}/${<}\"" >> ${bblayers_file}.tmp

rule/sub-rule/layer/.: .
	echo "BBLAYERS += \"${CURDIR}/${<}\"" >> ${bblayers_file}.tmp
	echo "BBLAYERS_NON_REMOVABLE =+ \"${CURDIR}/${<}\"" >> ${bblayers_file}.tmp

rule/sub-configure-layers: ${bblayers_file}.orig
	$(info log: sources_layers=${sources_layers})
	echo "# generated by $@" > ${bblayers_file}.tmp
	for dir in ${sources_layers} ; do make rule/sub-rule/layer/$${dir} ; done

rule/sub-configure-rescan: rule/done/sources_dir rule/done/configure-machine rule/done/sub-configure-layers rule/done/configure-downloads
	$(info log: sources_layers=${sources_layers})
	$(info remember dont call $@ direcly but configure)

rule/configure:
	${MAKE} rule/done/sub-configure-rescan rule/done/configure-conf rule/done/configure-bblayers rule/bblayers
	ln -fs ${sources_name} ${CURDIR}/sources_dir
	ln -fs ${build_dir} ${CURDIR}/build

rule/conf: ${conf_file}
	grep '^MACHINE.*' $<
	grep ${MACHINE} $<

rule/env/%: ${init_build_env}
	grep ${MACHINE} ${conf_file}
	cd ${<D}  \
 && ${source} ${<} ${build_dir} \
 && make -C ${CURDIR} rule/override/${@F} ARGS="${ARGS}"

rule/exec/%: ${build_dir} ${conf_file} ${bblayers_file}
	grep '^MACHINE.*' $</conf/local.conf
	cd ${<} && time ${@F} ${EXTRA_ARGS} ${ARGS}

rule/env-exec/%: ${init_build_env}
	cd ${<D}  \
 && ${source} ${<} ${build_dir} \
 && make -C ${CURDIR} rule/exec/${@F} ARGS="${ARGS}"

rule/env-shell: ${init_build_env}
	cd ${<D}  \
 && ${source} ${<} ${build_dir} && ${SHELL}

rule/setup-machine/%: rules/config/machine/%/config.mk GNUmakefile
	@echo "MACHINE?=${@F}" > ${local_file}
	@echo "distro?=${distro}" >> ${local_file}
	@${MAKE} GNUmakefile
	@${MAKE} rule/override/cleanall rule/override/reset MACHINE=${@F}
	grep MACHINE  ${local_file}
	unset MACHINE ; make rule/print | grep MACHINE | grep ${@F}


${local_file}/rule-rm:
	rm -fv ${@D}

rule/set-machine: GNUmakefile
	${MAKE} rule/override/machine-file MACHINE=${MACHINE} bsp=${bsp}
	grep "${MACHINE}" ${local_file}
	@echo "# If you want to set this machine, rename before commit :"
	@echo "# cp ${local_file} ${machine_file}"
	${MAKE} print | grep "MACHINE=${MACHINE}"

#rule/machine-file: ${local_file}

rule/machine-file: ${machine_config_file}
	@echo "include $<" > ${local_file}
	grep "${MACHINE}" ${local_file}

${local_file}: ${machine_config_file}
	@echo "include $<" > $@

${machine_config_file}:
	  mkdir -p ${@D}
	  echo -e "bsp?=${bsp}\nMACHINE?=${machine}" > $@

rule/scan-bsp: ${bsp_machines_dir}
	ls $</*.conf | sed -e 's|.*/\(.*\).conf|\1|g' \
 | while read machine ; do \
  ${MAKE} rule/override/set-machine MACHINE=$${machine} ;\
 done

rule/setup-scan-bsp: ${bsp_config_file}
	rm -rf rules/config/machine/tmp
	mkdir -p rules/config/machine/ sources-tmp
	ln -fs ${CURDIR}/${<D} rules/config/machine/tmp
	ln -fs ${CURDIR}/${<D}/default.xml sources-tmp/
	${MAKE} print rule/override/scm-repo-sync rule/override/scan-bsp \
 MACHINE=tmp bsp=${bsp}
	rm -rf rules/config/machine/tmp

rule/setup-bsp: print rule/override/setup-scan-bsp
	grep machine  ${local_file}

${bsp_machines_dir}: ${sources_dir}
	ls $@

${machines_list}:
	${MAKE} rule/build-machine/${@F}


rule/bsp: rule/override/setup-bsp
	${MAKE} print
	${MAKE} rule/override/build-machines-bsp

rule/bsp/%:
	-rm -v ${local_file}
	${MAKE} ${@D} bsp=${@F}

rule/bsps: ${tmp_dir}
	for bsp in ${bsp_list} ; do \
	${MAKE} rule/bsp/$${bsp} ; \
	done
	-rm -rf sources-tmp

rule/build-machine/%:
	grep '^MACHINE' rules/config/machine/${@F}/config.mk
	make rule/setup-machine/${@F}
	unset MACHINE ; make rule/override/all
#	make rule/override/images

rule/build-machines:
	for MACHINE in ${machines_list} ; do make rule/build-machine/$${MACHINE} ; done

rule/build-machines-bsp: ${bsp_machines_dir}
	ls $</*.conf | sed -e 's|.*/\(.*\).conf|\1|g' \
 | while read machine ; do \
 ${MAKE} $${machine} ; \
 done

rule/setup-bsps:
	for bsp in ${bsp_list} ; do \
	${MAKE} rule/override/setup-bsp bsp=$${bsp} ; \
	done
	-rm -rf sources-tmp


